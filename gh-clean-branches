#!/bin/zsh

# safely delete local branches that have no remotes and no hanging changes
# will not delete branches with not commited changes
# run inside a git repo folder

DRY_RUN=false
VERBOSE=true

while [[ "$#" -gt 0 ]]; do
  case "$1" in
    --dry-run )
      DRY_RUN=true
      shift
      ;;
    --force)
      FORCE_DELETE=true
      shift
      ;;
    --quiet)
      VERBOSE=false
      shift
      ;;
    * )
      printf "%s\n" "Usage: gh clean-branches [--dry-run] [--force] [--quiet]"
      exit 1
      ;;
  esac
done

red=$(printf '\e[1;31m')
green=$(printf '\e[1;32m')
yellow=$(printf '\e[1;33m')
blue=$(printf '\e[1;34m')
end=$(printf '\e[0m')

printf "%s\n" "${green}Sync branches${end}"
git fetch -p >/dev/null 2>&1 # hide response

upstream_name=$(git remote show)
home_branch=$(git branch --show-current)
default_branch=$(git remote show ${upstream_name} | awk '/HEAD branch/ {print $NF}')

printf "%s\n" "${green}Checking out ${default_branch}${end}"
git checkout $default_branch

printf "%s\n" "${green}Pulling ${default_branch}${end}"
git pull ${upstream_name} ${default_branch}
if [[ $? -eq 1 ]]; then
    printf "%s\n" "${red}Failed to pull, check for uncomitted changes.${end}"
    exit 1
fi

local_branches_str=$(git branch)
local_branches_str=${local_branches_str/\*?/  } # trim the "*"" on the current branch
remote_branches_str=$(git branch -r)
remote_branches_str=${remote_branches_str//${upstream_name}\// } # trim the "origin/" from branch names

if [[ ${VERBOSE} == true ]]; then
  printf "%s\n%s\n" "${blue}Local branches:${end}" "${local_branches_str}"
  printf "%s\n%s\n" "${blue}Remote branches:${end}" "${remote_branches_str}"
fi

setopt extended_glob
local_branches=("${(f)local_branches_str}")                    # split string by \n to array
local_branches=(${local_branches:#* ${default_branch}})        # filter out default_branch
local_branches=(${local_branches// ##})                        # trim spaces

remote_branches=("${(f)remote_branches_str}")                  # split string by \n to array
remote_branches=(${remote_branches:#* ${default_branch}})      # filter out default_branch
remote_branches=(${remote_branches// ##})                      # trim spaces

missing_upstream_branches=(${local_branches:|remote_branches}) # local_branches minus remote_branches

branches_count=${#missing_upstream_branches[@]}

if [[ ${FORCE_DELETE} == true ]]; then
  delete_flag='-D'
else
  delete_flag='-d'
fi

if [[ ${branches_count} -eq 0 ]]; then
    printf "%s\n" "${green}No local branches with missing upstream found${end}"
else
    printf "%s\n" "${blue}Local branches with missing upstream:${end}"
    for branch in "${missing_upstream_branches[@]}"; do
        printf "%s\n" "   ${branch}"
    done

    if [[ ${DRY_RUN} == false ]]; then
      [[ ${FORCE_DELETE} == true ]] && echo "${yellow}Force delete is enabled${end}"

      for branch in "${missing_upstream_branches[@]}"; do
          printf "%s\n" "${green}Deleting branch:${end}     ${branch}"
          git branch ${delete_flag} "${branch}"
          if [[ $? -eq 1 ]]; then
            printf "%s\n" "❌  ${red}Could not delete${end} ${branch}"
            printf "%s\n" "${yellow}Try using --force flag${end}"
          fi
      done
    else
        printf "%s\n" "${green}Dry run: not deleting branches${end}"
    fi
fi

# Trying to checkout the home branch, if this branch was deleted, it will silently fail and stay on the default_branch
git checkout $home_branch >/dev/null 2>&1 # hide response

printf "\n%s\n" "${green}Done${end}"
